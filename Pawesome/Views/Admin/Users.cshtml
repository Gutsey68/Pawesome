@{
    ViewData["Title"] = "Gestion des utilisateurs";
    Layout = "~/Views/Shared/Admin/_AdminLayout.cshtml";
}

<div class="page-header">
    <div class="page-header-content">
        <h1 class="page-title">Gestion des utilisateurs</h1>
        <p class="page-description">Gérez les comptes utilisateurs, les rôles et les autorisations.</p>
    </div>
</div>
<div class="datatable-container">
    <table id="usersTable" class="display responsive nowrap" style="width:100%">
        <thead>
        <tr>
            <th>ID</th>
            <th>Utilisateur</th>
            <th>Email</th>
            <th>Rôle</th>
            <th>Status</th>
            <th>Date d'inscription</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

@section Scripts {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
    <link rel="stylesheet" type="text/css"
          href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.dataTables.min.css">
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript"
            src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>

    <script>
        $(document).ready(function () {
            // Fonction pour mettre à jour les compteurs
            function updateCounters(data) {
                if (!data || !data.data) return;

                const totalUsers = data.data.length;
                let activeUsers = 0;
                let pendingUsers = 0;
                let bannedUsers = 0;

                data.data.forEach(user => {
                    if (user.status === 'Active') activeUsers++;
                    if (user.status === 'Pending') pendingUsers++;
                    if (user.status === 'Banned') bannedUsers++;
                });

                $('#totalUsers').text(totalUsers);
                $('#activeUsers').text(activeUsers);
                $('#pendingUsers').text(pendingUsers);
                $('#bannedUsers').text(bannedUsers);
            }

            let usersTable = $('#usersTable').DataTable({
                ajax: {
                    url: '@Url.Action("GetUsers", "Admin")',
                    type: 'GET',
                    dataSrc: function (json) {
                        updateCounters(json);
                        return json.data;
                    },
                    error: function (xhr, error, thrown) {
                        console.error('Erreur lors du chargement des données:', error, thrown);
                        alert('Une erreur est survenue lors du chargement des utilisateurs');
                    }
                },
                columns: [
                    {data: 'id'},
                    {
                        data: 'fullName',
                        render: function (data, type, row) {
                            const initial = data.charAt(0).toUpperCase();
                            return `
                            <div class="user-info">
                                    <div class="user-name">${data}</div>
                            </div>
                        `;
                        }
                    },
                    {data: 'email'},
                    {
                        data: 'role',
                        render: function (data) {
                            let badge = '';
                            switch (data) {
                                case 'Admin':
                                    badge = '<span class="badge" data-variant="purple">Admin</span>';
                                    break;
                                case 'Moderator':
                                    badge = '<span class="badge" data-variant="info">Modérateur</span>';
                                    break;
                                default:
                                    badge = '<span class="badge" data-variant="crimson">Utilisateur</span>';
                            }
                            return badge;
                        }
                    },
                    {
                        data: 'status',
                        render: function (data) {
                            let badge = '';
                            switch (data) {
                                case 'Active':
                                    badge = '<span class="badge" data-variant="success">Actif</span>';
                                    break;
                                case 'Banned':
                                    badge = '<span class="badge" data-variant="error">Banni</span>';
                                    break;
                                case 'Pending':
                                    badge = '<span class="badge" data-variant="warning">En attente</span>';
                                    break;
                                default:
                                    badge = '<span class="badge badge" data-variant="orange">' + data + '</span>';
                            }
                            return badge;
                        }
                    },
                    {
                        data: 'createdAt',
                        render: function (data) {
                            try {
                                const date = new Date(data);
                                return `
                                <div class="date-info">
                                    <span>${date.toLocaleDateString('fr-FR')}</span>
                                    <span class="time-small">${date.toLocaleTimeString('fr-FR')}</span>
                                </div>
                            `;
                            } catch (e) {
                                return 'Non défini';
                            }
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            const banBtn = row.status === 'Banned'
                                ? `<button class="btn-unban btn-warning button" data-variant="icon" data-id="${row.id}" title="Réactiver">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                </svg>
                               </button>`
                                : `<button class="btn-ban btn-danger button" data-variant="icon" data-id="${row.id}" title="Bannir">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <path d="m4.9 4.9 14.2 14.2"></path>
                                </svg>
                               </button>`;

                            return `
                                <div class="action-buttons">
                                    <button class="btn-view btn-info button" data-variant="icon" data-id="${row.id}" title="Voir">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                                            <circle cx="12" cy="12" r="3"></circle>
                                        </svg>
                                    </button>
                                    <button class="btn-edit btn-primary button" data-variant="icon" data-id="${row.id}" title="Éditer">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
                                        </svg>
                                    </button>
                                    ${banBtn}
                                </div>
                            `;
                        },
                        orderable: false
                    }
                ],
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.6/i18n/fr-FR.json'
                },
                responsive: true,
                processing: true,
                order: [[0, 'desc']]
            });

            // Gérer les actions
            $('#usersTable').on('click', '.btn-view', function () {
                const userId = $(this).data('id');
                window.location.href = '/User/Profile/' + userId;
            });

            $('#usersTable').on('click', '.btn-edit', function () {
                const userId = $(this).data('id');
                window.location.href = '/User/Edit/' + userId;
            });

            $('#usersTable').on('click', '.btn-ban', function () {
                const userId = $(this).data('id');
                if (confirm('Êtes-vous sûr de vouloir bannir cet utilisateur?')) {
                    $.ajax({
                        url: '/Admin/BanUser/' + userId,
                        type: 'POST',
                        success: function (result) {
                            if (result.success) {
                                usersTable.ajax.reload();
                            } else {
                                alert('Erreur lors du bannissement: ' + result.message);
                            }
                        },
                        error: function () {
                            alert('Une erreur est survenue lors de la communication avec le serveur');
                        }
                    });
                }
            });

            $('#usersTable').on('click', '.btn-unban', function () {
                const userId = $(this).data('id');
                if (confirm('Êtes-vous sûr de vouloir réactiver cet utilisateur?')) {
                    $.ajax({
                        url: '/Admin/UnbanUser/' + userId,
                        type: 'POST',
                        success: function (result) {
                            if (result.success) {
                                usersTable.ajax.reload();
                            } else {
                                alert('Erreur lors de la réactivation: ' + result.message);
                            }
                        },
                        error: function () {
                            alert('Une erreur est survenue lors de la communication avec le serveur');
                        }
                    });
                }
            });

            $('#addUserBtn').click(function () {
                window.location.href = '/Admin/CreateUser';
            });

            $('#refreshBtn').click(function () {
                usersTable.ajax.reload();
            });
        });
    </script>
}
