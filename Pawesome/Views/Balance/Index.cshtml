@model Pawesome.Models.ViewModels.Balance.BalanceViewModel
@{
    ViewData["Title"] = "Mon solde";
}

<main class="container balance-container" role="main">
    <section class="balance-section">
        <h1 class="section-title">Mon solde Pawesome</h1>

        <div class="balance-cards">
            <article class="balance-card available-balance">
                <div class="balance-card-body">
                    <h2 class="balance-card-title">Solde disponible</h2>
                    <p class="balance-amount">@Model.AvailableBalance.ToString("C")</p>
                </div>
            </article>

            <article class="balance-card withdrawal-card">
                <div class="balance-card-body">
                    <h2 class="balance-card-title">Demander un retrait</h2>
                    <form asp-action="CreatePayout" method="post" class="withdrawal-form">
                        <div class="form-group">
                            <label for="amount" class="form-label">Montant (€)</label>
                            <input type="number" class="form-control" id="amount" name="amount" 
                                   step="0.01" min="0.01" max="@Model.AvailableBalance" 
                                   value="@Model.AvailableBalance.ToString("F2")" required 
                                   aria-describedby="amount-help" />
                            <p id="amount-help" class="info-hint">Le montant maximal que vous pouvez retirer est de @Model.AvailableBalance.ToString("C")</p>
                        </div>
                        <button type="submit" class="button" data-variant="primary" data-size="md" 
                                @(Model.AvailableBalance <= 0 ? "disabled" : "")>
                            Effectuer le retrait
                        </button>
                    </form>
                </div>
            </article>
        </div>

        <section class="history-section">
            <h2 class="subsection-title">Historique des retraits</h2>
            @if (Model.PayoutHistory.Any())
            {
                <div class="table-container">
                    <table class="table table-striped" aria-label="Historique des retraits">
                        <thead>
                            <tr>
                                <th scope="col">Date</th>
                                <th scope="col">Montant</th>
                                <th scope="col">Statut</th>
                                <th scope="col">Date d'arrivée</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payout in Model.PayoutHistory)
                            {
                                <tr>
                                    <td>@payout.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@payout.Amount.ToString("C")</td>
                                    <td>
                                        @switch (payout.Status)
                                        {
                                            case "paid":
                                                <span class="badge" data-variant="success">Payé</span>
                                                break;
                                            case "pending":
                                                <span class="badge" data-variant="warning">En attente</span>
                                                break;
                                            case "in_transit":
                                                <span class="badge" data-variant="info">En transit</span>
                                                break;
                                            case "failed":
                                                <span class="badge" data-variant="error">Échoué</span>
                                                break;
                                            default:
                                                <span class="badge" data-variant="secondary">@payout.Status</span>
                                                break;
                                        }
                                    </td>
                                    <td>
                                        @(payout.ArrivalDate.HasValue ? payout.ArrivalDate.Value.ToString("dd/MM/yyyy") : "N/A")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert" data-variant="info" role="alert">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" 
                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" 
                         stroke-linejoin="round" class="lucide lucide-info" aria-hidden="true">
                        <circle cx="12" cy="12" r="10"/>
                        <path d="M12 16v-4"/>
                        <path d="M12 8h.01"/>
                    </svg>
                    <div>
                        <h4>Information</h4>
                        <p>Vous n'avez pas encore effectué de retrait.</p>
                    </div>
                </div>
            }
        </section>
    </section>
</main>
