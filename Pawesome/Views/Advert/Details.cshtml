@using Pawesome.Models.Enums
@model Pawesome.Models.Dtos.Advert.PetSittingAdvertDto

@{
    ViewData["Title"] = Model.IsPetSitter ? "Offre de pet sitting" : "Recherche de pet sitting";
    
    string GetStatusVariant(AdvertStatus status) => status switch
    {
        AdvertStatus.Pending => "info",
        AdvertStatus.PendingOffer => "purple",
        AdvertStatus.Active => "success",
        AdvertStatus.Cancelled => "error",
        AdvertStatus.Expired => "warning",
        AdvertStatus.Archived => "secondary",
        AdvertStatus.FullyBooked => "lime",
        _ => "secondary"
    };
    
    string GetStatusText(AdvertStatus status) => status switch
    {
        AdvertStatus.Pending => "En attente",
        AdvertStatus.PendingOffer => "Offre en attente",
        AdvertStatus.Active => "Active",
        AdvertStatus.Cancelled => "Annulée",
        AdvertStatus.Expired => "Expirée",
        AdvertStatus.Archived => "Archivée",
        AdvertStatus.FullyBooked => "Complétée",
        _ => status.ToString()
    };
}

<main role="main" class="advert-details">

    <div class="advert-title2">
        <div class="title-container">
            <h1 class="section-title">@(Model.IsPetSitter ? "Offre de pet sitting" : "Recherche d'un pet sitter")</h1>
            <a asp-controller="Report" asp-action="Create" asp-route-targetId="@Model.Id" asp-route-reportType="advert"
               class="button"
               data-size="xs"
               data-color="error"
               data-bs-toggle="tooltip"
               title="Signaler cette annonce"
               data-bs-target="#reportModal"
               data-report-type="user"
               data-target-id="@Model.Id">
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none"
                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-flag-icon lucide-flag">
                    <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"/>
                    <line x1="4" x2="4" y1="22" y2="15"/>
                </svg>
            </a>
        </div>
        <p class="badge" data-variant="@GetStatusVariant(Model.Status)">@GetStatusText(Model.Status)</p>
    </div>
    
    <div class="advert-header">
        <div class="advert-dates-price">
            <div class="advert-date">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-days">
                    <rect width="18" height="18" x="3" y="4" rx="2" ry="2"/>
                    <line x1="16" x2="16" y1="2" y2="6"/>
                    <line x1="8" x2="8" y1="2" y2="6"/>
                    <line x1="3" x2="21" y1="10" y2="10"/>
                    <path d="M8 14h.01"/>
                    <path d="M12 14h.01"/>
                    <path d="M16 14h.01"/>
                    <path d="M8 18h.01"/>
                    <path d="M12 18h.01"/>
                    <path d="M16 18h.01"/>
                </svg>
                <span>Du @Model.StartDate.ToString("dd/MM/yyyy") au @Model.EndDate.ToString("dd/MM/yyyy")</span>
            </div>
            <div class="advert-price">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-euro">
                    <path d="M4 10h12"/>
                    <path d="M4 14h9"/>
                    <path d="M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2"/>
                </svg>
                <span>@Model.Amount.ToString("C")</span>
            </div>
            <div class="advert-location">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin">
                    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/>
                    <circle cx="12" cy="10" r="3"/>
                </svg>
                <span>@Model.City</span>
            </div>
        </div>
    </div>
    <div class="advert-created-at mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clock">
            <circle cx="12" cy="12" r="10"/>
            <polyline points="12 6 12 12 16 14"/>
        </svg>
        <span>Publiée le @Model.CreatedAt.ToString("dd/MM/yyyy")</span>
    </div>
    <div class="advert-sections">
        <section class="advert-section owner-section">
            <h2 class="section-heading">
                @(Model.IsPetSitter ? "Pet sitter" : "Propriétaire des animaux")
            </h2>
            @if (Model.Owner != null)
            {
                <div class="owner-card">
                    <divd data-size="xl"  class="avatar">
                        <img class="avatar-image" src="@ImageHelper.GetPhotoUrl(Model.Owner.Photo)" alt="Photo de @Model.Owner.FullName" />
                    </divd>
                    <div class="owner-info">
                        <h3>@Model.Owner.FullName</h3>
                        @if (Model.Owner.Rating.HasValue)
                        {
                            <div class="star-rating">@Html.DisplayStars(Model.Owner.Rating)</div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Owner.City) || !string.IsNullOrEmpty(Model.Owner.Country))
                        {
                            <p class="owner-location">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin">
                                    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/>
                                    <circle cx="12" cy="10" r="3"/>
                                </svg>
                                @(!string.IsNullOrEmpty(Model.Owner.City) ? Model.Owner.City : "")
                                @(!string.IsNullOrEmpty(Model.Owner.City) && !string.IsNullOrEmpty(Model.Owner.Country) ? ", " : "")
                                @(!string.IsNullOrEmpty(Model.Owner.Country) ? Model.Owner.Country : "")
                            </p>
                        }
                        <a asp-controller="User" asp-action="Profile" asp-route-id="@Model.Owner.Id" class="button" data-variant="outline" data-size="sm">
                            Voir le profil
                        </a>
                    </div>
                </div>
            }
            else
            {
                <div class="alert" data-variant="warning">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                         stroke-linejoin="round" class="lucide lucide-alert-triangle">
                        <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/>
                        <path d="M12 9v4"/>
                        <path d="M12 17h.01"/>
                    </svg>
                    <div>
                        <h4>Attention</h4>
                        <p>Information sur le propriétaire non disponible</p>
                    </div>
                </div>
            }
        </section>

        @if (Model.IsPetSitter)
        {
            <section class="advert-section animal-types-section">
                <h2 class="section-heading">Types d'animaux acceptés</h2>
                <div class="animal-types-list">
                    @foreach (var animalType in Model.Pets.Select(p => p.AnimalTypeName).Distinct())
                    {
                        <span class="badge" data-variant="@animalType">@animalType</span>
                    }
                </div>
            </section>
        }
        else if (Model.Pets != null && Model.Pets.Any())
        {
            <section class="advert-section pets-section">
                <h2 class="section-heading">Animaux concernés</h2>
                <div class="pets-grid">
                    @foreach (var pet in Model.Pets)
                    {
                        <div class="pet-card">
                            <div class="pet-image">
                                <img src="@ImageHelper.GetPetPhotoUrl(pet.Photo)" alt="@pet.Name" />
                            </div>
                            <div class="pet-info">
                                <div class="pet-header">
                                    <h3 class="pet-name">@pet.Name</h3>
                                </div>
                                <span class="badge" data-variant="@pet.AnimalTypeName">@pet.AnimalTypeName</span>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }

        @if (!string.IsNullOrEmpty(Model.AdditionalInformation))
        {
            <section class="advert-section description-section">
                <h2 class="section-heading">Informations supplémentaires</h2>
                <div class="advert-description">
                    @Model.AdditionalInformation
                </div>
            </section>
        }
    </div>
    <div class="advert-actions">
        <div class="action-buttons">
            @{
                bool isOwner = false;
                if (Model.Owner != null && User.Identity != null && User.Identity.IsAuthenticated)
                {
                    var userIdClaim = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
                    var currentUserId = userIdClaim != null && int.TryParse(userIdClaim.Value, out int uid) ? uid : 0;
                    isOwner = currentUserId == Model.Owner.Id;
                }
            }
            
            @if (isOwner)
            {
                <div class="owner-actions">
                    @if (Model.Status == AdvertStatus.Pending || Model.Status == AdvertStatus.PendingOffer)
                    {
                        @if (Model.IsPetSitter)
                        {
                            <a asp-controller="Advert" asp-action="EditOffer" asp-route-id="@Model.Id" class="button" data-variant="secondary" data-size="sm">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil" style="margin-right: var(--space-2);">
                                    <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                                    <path d="m15 5 4 4"/>
                                </svg>
                                Modifier
                            </a>
                        }
                        else
                        {
                            <a asp-controller="Advert" asp-action="EditRequest" asp-route-id="@Model.Id" class="button" data-variant="secondary" data-size="sm">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil" style="margin-right: var(--space-2);">
                                    <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                                    <path d="m15 5 4 4"/>
                                </svg>
                                Modifier
                            </a>
                        }

                        <a asp-controller="Advert" asp-action="ConfirmStatusChange" asp-route-id="@Model.Id" asp-route-status="cancelled" 
                           class="button" data-variant="destructive" data-size="sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x" style="margin-right: var(--space-2);">
                                <path d="M18 6 6 18"/>
                                <path d="m6 6 12 12"/>
                            </svg>
                            Annuler
                        </a>
                    }
                </div>
            }
            else
            {
                @if (User.Identity?.IsAuthenticated == true && (Model.Status == AdvertStatus.Pending || Model.Status == AdvertStatus.PendingOffer))
                {
                    @if (Model.Owner != null && Model.Owner.Id != int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0"))
                    {
                        <a asp-controller="Booking" asp-action="Create" asp-route-advertId="@Model.Id" 
                           class="button" data-variant="primary" data-size="sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-credit-card" style="margin-right: var(--space-2);">
                                <rect width="20" height="14" x="2" y="5" rx="2"/>
                                <line x1="2" x2="22" y1="10" y2="10"/>
                            </svg> 
                            Réserver maintenant
                        </a>
                        <a asp-controller="Message" asp-action="StartConversation" asp-route-otherUserId="@Model.Owner.Id" 
                           class="button" data-variant="secondary" data-size="sm">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1 lucide lucide-message-circle-icon lucide-message-circle"><path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z"/></svg>
                            Contacter
                        </a>
                    }
                }
                else if (Model.Owner != null && User.Identity?.IsAuthenticated == false)
                {
                    <a asp-controller="Auth" asp-action="Login" asp-route-returnUrl="@Context.Request.Path" 
                       class="button" data-variant="primary" data-size="sm">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-in" style="margin-right: var(--space-2);">
                            <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/>
                            <polyline points="10 17 15 12 10 7"/>
                            <line x1="15" x2="3" y1="12" y2="12"/>
                        </svg>
                        Connectez-vous pour interagir
                    </a>
                }
            }
            
            <a asp-controller="Advert" asp-action="Index" class="button" data-variant="outline" data-size="sm">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left" style="margin-right: var(--space-1);">
                    <path d="m12 19-7-7 7-7"/>
                    <path d="M19 12H5"/>
                </svg>
                Retour aux annonces
            </a>
        </div>
    </div>
</main>
