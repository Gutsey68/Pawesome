@model Pawesome.Models.ViewModels.Advert.AdvertViewModel

@{
    ViewData["Title"] = "Annonces de Pet Sitting";
}

<main role="main" class="filter-index-container container mb-4">
    <div class="filter-index-header">
        <h1 class="filter-section-title">Annonces de Pet Sitting</h1>
        <div class="filter-create-buttons">
            <a asp-action="CreateRequest" class="button" data-variant="secondary" data-size="sm">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-search" style="margin-right: var(--space-2);">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.3-4.3"/>
                </svg>
                Demander un pet sitter
            </a>
            <a asp-action="CreateOffer" class="button" data-variant="primary" data-size="sm">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                     stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                     class="lucide lucide-plus" style="margin-right: var(--space-2);">
                    <path d="M12 5v14"/>
                    <path d="M5 12h14"/>
                </svg>
                Proposer mes services
            </a>
        </div>
    </div>

    <div class="filter-content-container">
        <aside class="filter-filters-panel">
            <form id="filterForm" method="get" asp-controller="Advert" asp-action="Index">
                <input type="hidden" name="isPetSitter" value="@ViewContext.RouteData.Values["isPetSitter"]"/>
                <input type="hidden" asp-for="IsPetSitterOffer"/>

                <section class="filter-filter-section">
                    <div class="filter-filter-header">
                        <h3>Trier par</h3>
                        <a href="@Url.Action("Index", "Advert", new { isPetSitter = ViewContext.RouteData.Values["isPetSitter"] })"
                           class="filter-reset-link">Tout effacer</a>
                    </div>
                    <div class="filter-options">
                        <div class="filter-filter-option">
                            <label>
                                <input type="radio" name="SortOption" value="newest"
                                       @(Model.SortOption == "newest" ? "checked" : "")>
                                Plus Récentes
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-clock-arrow-up icon">
                                    <path d="M13.228 21.925A10 10 0 1 1 21.994 12.338"/>
                                    <path d="M12 6v6l1.562.781"/>
                                    <path d="m14 18 4-4 4 4"/>
                                    <path d="M18 22v-8"/>
                                </svg>
                            </label>
                        </div>
                        <div class="filter-filter-option">
                            <label>
                                <input type="radio" name="SortOption" value="oldest"
                                       @(Model.SortOption == "oldest" ? "checked" : "")>
                                Plus Anciennes
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-clock-arrow-down icon">
                                    <path d="M12.338 21.994A10 10 0 1 1 21.925 13.227"/>
                                    <path d="M12 6v6l2 1"/>
                                    <path d="m14 18 4 4 4-4"/>
                                    <path d="M18 14v8"/>
                                </svg>
                            </label>
                        </div>
                        <div class="filter-filter-option">
                            <label>
                                <input type="radio" name="SortOption" value="date_start_asc"
                                       @(Model.SortOption == "date_start_asc" ? "checked" : "")>
                                Début proche
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-calendar icon">
                                    <rect width="18" height="18" x="3" y="4" rx="2"/>
                                    <line x1="16" x2="16" y1="2" y2="6"/>
                                    <line x1="8" x2="8" y1="2" y2="6"/>
                                    <line x1="3" x2="21" y1="10" y2="10"/>
                                </svg>
                            </label>
                        </div>
                        <div class="filter-filter-option">
                            <label>
                                <input type="radio" name="SortOption" value="price_asc"
                                       @(Model.SortOption == "price_asc" ? "checked" : "")>
                                Prix croissant
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-euro icon">
                                    <path d="M4 10h12"/>
                                    <path d="M4 14h9"/>
                                    <path
                                        d="M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2"/>
                                </svg>
                            </label>
                        </div>
                        <div class="filter-filter-option">
                            <label>
                                <input type="radio" name="SortOption" value="price_desc"
                                       @(Model.SortOption == "price_desc" ? "checked" : "")>
                                Prix décroissant
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-euro icon">
                                    <path d="M4 10h12"/>
                                    <path d="M4 14h9"/>
                                    <path
                                        d="M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2"/>
                                </svg>
                            </label>
                        </div>
                    </div>
                </section>

                <div class="filter-divider"></div>

                <section class="filter-filter-section">
                    <h3>Par ville</h3>
                    <div class="mt-2">
                        <input type="text" asp-for="City" class="filter-form-control" placeholder="Entrez une ville">
                    </div>
                </section>

                <div class="filter-divider"></div>

                <section class="filter-filter-section">
                    <h3 class="mb-2">Par prix</h3>
                    <div class="filter-price-slider">
                        <div class="filter-range-inputs">
                            <input id="minPrice" type="range" min="@Model.MinPriceBeforeReload" max="@Model.MaxPriceBeforeReload" value="@(Model.MinPrice ?? Model.MinPriceBeforeReload)" step="1">
                            <input id="maxPrice" type="range" min="@Model.MinPriceBeforeReload" max="@Model.MaxPriceBeforeReload" value="@(Model.MaxPrice ?? Model.MaxPriceBeforeReload)" step="1">
                        </div>
                        <div class="filter-price-inputs">
                            <input id="minPriceText" type="text" name="MinPrice" value="@(Math.Round(Model.MinPrice ?? Model.MinPriceBeforeReload))">
                            <input id="maxPriceText" type="text" name="MaxPrice" value="@(Math.Round(Model.MaxPrice ?? Model.MaxPriceBeforeReload))">
                        </div>
                    </div>
                </section>

                <div class="filter-divider"></div>

                <section class="filter-filter-section">
                    <h3 class="mb-2">Par date</h3>
                    <div class="mb-2">
                        <label class="filter-form-label">Début à partir du:</label>
                        <input type="date" asp-for="StartDateFrom" class="filter-form-control">
                    </div>
                    <div>
                        <label class="filter-form-label">Fin jusqu'au:</label>
                        <input type="date" asp-for="EndDateTo" class="filter-form-control">
                    </div>
                </section>

                <div class="filter-divider"></div>

                <section class="filter-filter-section">
                    <h3 class="mb-2">Par type d'animal</h3>
                    @if (Model.AnimalTypes != null && Model.AnimalTypes.Any())
                    {
                        <div id="animalCheckboxes">
                            @foreach (var animalType in Model.AnimalTypes)
                            {
                                <div class="filter-filter-option">
                                    <label>
                                        <input type="checkbox" name="AnimalTypeIds" value="@animalType.Id"
                                               class="animal-checkbox"
                                               @(Model.AnimalTypeIds != null && Model.AnimalTypeIds.Contains(animalType.Id) ? "checked" : "")>
                                        @animalType.Name
                                    </label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert" data-variant="warning">
                            <div>
                                <p>Aucun type d'animal disponible.</p>
                            </div>
                        </div>
                    }
                </section>

                <div class="filter-divider"></div>

                <button type="submit" class="button" data-variant="primary" data-size="md">Rechercher</button>
            </form>
        </aside>

        <div class="filter-main-content">
            <div class="filter-tabs-container">
                <div class="filter-tabs-list" role="tablist">
                    <a asp-action="Index" asp-route-isPetSitter="false"
                       class="filter-tab @(ViewContext.RouteData.Values["isPetSitter"]?.ToString() == "false" ? "active" : "")"
                       role="tab"
                       aria-selected="@(ViewContext.RouteData.Values["isPetSitter"]?.ToString() == "false" ? "true" : "false")">
                        Demandes
                    </a>
                    <a asp-action="Index" asp-route-isPetSitter="true"
                       class="filter-tab @(ViewContext.RouteData.Values["isPetSitter"]?.ToString() == "true" ? "active" : "")"
                       role="tab"
                       aria-selected="@(ViewContext.RouteData.Values["isPetSitter"]?.ToString() == "true" ? "true" : "false")">
                        Offres
                    </a>
                </div>
            </div>

            <div class="filter-adverts-grid">
                @if (!Model.Adverts.Any())
                {
                    <div class="filter-mobile-hidden"></div>
                    <div class="filter-empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                             class="lucide lucide-search-x">
                            <path d="m13.5 8.5-5 5"/>
                            <path d="m8.5 8.5 5 5"/>
                            <circle cx="11" cy="11" r="8"/>
                            <path d="m21 21-4.3-4.3"/>
                        </svg>
                        <h3>Aucune annonce disponible</h3>
                        <p>Aucune annonce ne correspond à vos critères de recherche.</p>
                    </div>
                }
                else
                {
                    @foreach (var advert in Model.Adverts)
                    {
                        <article class="filter-advert-card">
                            <div class="filter-card-header">
                                <span class="filter-advert-badge @(advert.IsPetSitter ? "offer" : "request")">
                                    @(advert.IsPetSitter ? "Offre" : "Demande")
                                </span>
                                <span class="filter-advert-price">@advert.Amount.ToString("C")</span>
                            </div>
                            <div class="filter-card-body">
                                @if (!string.IsNullOrEmpty(advert.City))
                                {
                                    <h3 class="filter-advert-title">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18"
                                             viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                             stroke-linecap="round" stroke-linejoin="round"
                                             class="lucide lucide-map-pin">
                                            <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/>
                                            <circle cx="12" cy="10" r="3"/>
                                        </svg>
                                        @advert.City
                                    </h3>
                                }
                                <p class="filter-advert-info">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                         stroke-linejoin="round" class="lucide lucide-calendar">
                                        <rect width="18" height="18" x="3" y="4" rx="2"/>
                                        <line x1="16" x2="16" y1="2" y2="6"/>
                                        <line x1="8" x2="8" y1="2" y2="6"/>
                                        <line x1="3" x2="21" y1="10" y2="10"/>
                                    </svg>
                                    Du @advert.StartDate.ToString("dd/MM/yyyy") au @advert.EndDate.ToString("dd/MM/yyyy")
                                </p>

                                @if (advert.Pets.Any())
                                {
                                    <div>
                                        <p class="filter-form-label">Animaux :</p>
                                        <div class="filter-pets-tags">
                                            @foreach (var pet in advert.Pets)
                                            {
                                                <span class="badge" data-variant="@pet.AnimalTypeName"
                                                      data->@pet.AnimalTypeName</span>
                                            }
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(advert.AdditionalInformation))
                                {
                                    <p class="filter-description-text">
                                        @(advert.AdditionalInformation.Length > 100 ? advert.AdditionalInformation.Substring(0, 100) + "..." : advert.AdditionalInformation)
                                    </p>
                                }

                                <div class="mt-3">
                                    <a asp-action="Details" asp-route-id="@advert.Id" class="button"
                                       data-variant="outline" data-size="sm">Voir les détails</a>
                                </div>
                            </div>
                            <div class="filter-card-footer">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                     stroke-linejoin="round" class="lucide lucide-clock"
                                     style="margin-right: var(--space-1);">
                                    <circle cx="12" cy="12" r="10"/>
                                    <polyline points="12 6 12 12 16 14"/>
                                </svg>
                                <span>
                                    Publié le @advert.CreatedAt.ToString("dd/MM/yyyy")
                                </span>
                            </div>
                        </article>
                    }
                }
            </div>
        </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const minPriceSlider = document.getElementById('minPrice');
        const maxPriceSlider = document.getElementById('maxPrice');
        const minPriceText = document.getElementById('minPriceText');
        const maxPriceText = document.getElementById('maxPriceText');
        const minPrice = @Html.Raw(Model.MinPriceBeforeReload.ToString("0"));
        const maxPrice = @Html.Raw(Model.MaxPriceBeforeReload.ToString("0"));
        const initialMinValue = @Html.Raw((Model.MinPrice ?? Model.MinPriceBeforeReload).ToString("0"));
        const initialMaxValue = @Html.Raw((Model.MaxPrice ?? Model.MaxPriceBeforeReload).ToString("0"));
        
        console.log("Min price: " + minPrice);
        console.log("Max price: " + maxPrice);
        console.log("Initial min value: " + initialMinValue);
        console.log("Initial max value: " + initialMaxValue);
        
        if(minPriceSlider) {
            minPriceSlider.min = minPrice;
            minPriceSlider.max = maxPrice;
            minPriceSlider.value = initialMinValue;
        }
        
        if(maxPriceSlider) {
            maxPriceSlider.min = minPrice;
            maxPriceSlider.max = maxPrice;
            maxPriceSlider.value = initialMaxValue;
        }

        if(minPriceText) {
            minPriceText.value = initialMinValue;
        }
        
        if(maxPriceText) {
            maxPriceText.value = initialMaxValue;
        }

        minPriceSlider?.addEventListener('input', () => {
            minPriceText.value = Math.round(minPriceSlider.value);
            if (parseInt(minPriceSlider.value) > parseInt(maxPriceSlider.value)) {
                maxPriceSlider.value = minPriceSlider.value;
                maxPriceText.value = Math.round(minPriceSlider.value);
            }
        });

        maxPriceSlider?.addEventListener('input', () => {
            maxPriceText.value = Math.round(maxPriceSlider.value);
            if (parseInt(maxPriceSlider.value) < parseInt(minPriceSlider.value)) {
                minPriceSlider.value = maxPriceSlider.value;
                minPriceText.value = Math.round(maxPriceSlider.value);
            }
        });

        minPriceText?.addEventListener('change', () => {
            const value = parseInt(minPriceText.value);
            if (!isNaN(value)) {
                minPriceSlider.value = Math.max(minPrice, Math.min(maxPrice, value));
                minPriceText.value = Math.round(minPriceSlider.value);
            }
        });

        maxPriceText?.addEventListener('change', () => {
            const value = parseInt(maxPriceText.value);
            if (!isNaN(value)) {
                maxPriceSlider.value = Math.max(minPrice, Math.min(maxPrice, value));
                maxPriceText.value = Math.round(maxPriceSlider.value);
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const tabs = document.querySelectorAll('.filter-tabs-list .filter-tab');

        const urlParams = new URLSearchParams(window.location.search);
        let isPetSitter = '@ViewContext.RouteData.Values["isPetSitter"]';

        if (urlParams.has('isPetSitter')) {
            isPetSitter = urlParams.get('isPetSitter');
        }

        tabs.forEach(tab => {
            const href = tab.getAttribute('href');
            const isTabForPetSitter = href && href.includes('isPetSitter=true');

            if ((isTabForPetSitter && isPetSitter === 'true') ||
                (!isTabForPetSitter && (isPetSitter === 'false' || isPetSitter === ''))) {

                tab.classList.add('active');
                tab.setAttribute('aria-selected', 'true');
                tab.style.backgroundColor = 'var(--color-primary-1)';
                tab.style.color = 'var(--color-primary-12)';
                tab.style.fontWeight = 'var(--font-weight-medium)';
            } else {
                tab.classList.remove('active');
                tab.setAttribute('aria-selected', 'false');
                tab.style.backgroundColor = 'transparent';
                tab.style.color = 'var(--color-primary-11)';
            }
        });
    });
</script>
