@model Pawesome.Models.ViewModels.Message.ConversationViewModel
@{
    ViewData["Title"] = "Conversation avec " + Model.OtherUserFullName;
    Layout = "~/Views/Shared/Message/_MessagesLayout.cshtml";
}

<div class="conversation-page" data-conversation-id="@Model.OtherUserId">
    <div class="conversation-container">
        <div class="conversation-header">
            <div class="user-info">
                @if (!string.IsNullOrEmpty(Model.OtherUserPhoto))
                {          
                    <div class="avatar" data-size="md">
                        <img src="@ImageHelper.GetPhotoUrl(Model.OtherUserPhoto)" alt="@Model.OtherUserFullName" class="avatar-image">
                    </div>
                }
                else
                {
                    <div class="avatar" data-size="md">
                        <div class="avatar-fallback">
                            @Model.OtherUserFullName.Substring(0, 1).ToUpper()
                        </div>
                    </div>
                }
                <a href="@Url.Action("Profile", "User", new { id = Model.OtherUserId })" class="user-name-link">
                    <h2 class="user-name">@Model.OtherUserFullName</h2>
                </a>
            </div>
        </div>
        <div id="messages-container" class="messages-container">
            @if (!Model.Messages.Any())
            {
                <div class="empty-conversation">
                    <p class="empty-title">Aucun message pour l'instant</p>
                    <p class="empty-subtitle">Envoyez un message pour commencer la conversation</p>
                </div>
            }
            else
            {
                @foreach (var message in Model.Messages)
                {
                    <div class="message-wrapper @(message.IsCurrentUserSender ? "message-outgoing" : "message-incoming")">
                        <div class="message">
                            <p class="message-content">@message.Content</p>
                            <p class="message-time">@message.FormattedDate</p>
                        </div>
                    </div>
                }
            }
        </div>

        <form id="message-form" method="post" action="@Url.Action("SendMessage")" class="message-form">
            <input type="hidden" name="ReceiverId" id="receiver-id" value="@Model.OtherUserId" />
            <div class="message-input-container">
                <input type="text" id="message-input" name="Content" placeholder="Ã‰crivez votre message..." required>
                <button type="submit" class="button" data-variant="icon" id="send-message-btn">
                    <span id="sending-indicator" style="display: none;" class="spinner" role="status" aria-hidden="true"></span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-icon lucide-send" id="lucide-send-icon"><path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"/><path d="m21.854 2.147-10.94 10.939"/></svg>
                </button>
            </div>
        </form>
    </div>
</div>
